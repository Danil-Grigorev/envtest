package main

/*
// Generated by rust2go. Please DO NOT edit this C part manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct StringRef {
  const uint8_t *ptr;
  uintptr_t len;
} StringRef;

typedef struct BinaryAssetsSettingsRef {
  bool download_binary_assets;
  struct StringRef download_binary_assets_version;
  struct StringRef download_binary_assets_index_url;
  struct StringRef binary_assets_directory;
} BinaryAssetsSettingsRef;

typedef struct ListRef {
  const void *ptr;
  uintptr_t len;
} ListRef;

typedef struct CRDInstallOptionsRef {
  struct ListRef paths;
  struct ListRef crds;
  bool error_if_path_missing;
} CRDInstallOptionsRef;

typedef struct ServerRef {
  struct StringRef kubeconfig;
} ServerRef;

typedef struct CreateResponseRef {
  struct ListRef err;
  struct ServerRef server;
} CreateResponseRef;

typedef struct DestroyResponseRef {
  struct ListRef err;
} DestroyResponseRef;

typedef struct EnvironmentRef {
  struct CRDInstallOptionsRef crd_install_options;
  struct BinaryAssetsSettingsRef binary_assets_settings;
} EnvironmentRef;
*/
import "C"
import (
	"runtime"
	"unsafe"

	"github.com/ihciah/rust2go/asmcall"
)

var EnvTestImpl EnvTest

type EnvTest interface {
	create(req *Environment) CreateResponse
	destroy(kubeconfig *string) DestroyResponse
}

//export CEnvTest_create
func CEnvTest_create(req C.EnvironmentRef, slot *C.void, cb *C.void) {
	_new_req := newEnvironment(req)
	resp := EnvTestImpl.create(&_new_req)
	resp_ref, buffer := cvt_ref(cntCreateResponse, refCreateResponse)(&resp)
	asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
	runtime.KeepAlive(resp_ref)
	runtime.KeepAlive(resp)
	runtime.KeepAlive(buffer)
}

//export CEnvTest_destroy
func CEnvTest_destroy(kubeconfig C.StringRef, slot *C.void, cb *C.void) {
	_new_kubeconfig := newString(kubeconfig)
	resp := EnvTestImpl.destroy(&_new_kubeconfig)
	resp_ref, buffer := cvt_ref(cntDestroyResponse, refDestroyResponse)(&resp)
	asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
	runtime.KeepAlive(resp_ref)
	runtime.KeepAlive(resp)
	runtime.KeepAlive(buffer)
}

func newString(s_ref C.StringRef) string {
	return unsafe.String((*byte)(unsafe.Pointer(s_ref.ptr)), s_ref.len)
}
func refString(s *string, _ *[]byte) C.StringRef {
	return C.StringRef{
		ptr: (*C.uint8_t)(unsafe.StringData(*s)),
		len: C.uintptr_t(len(*s)),
	}
}

func ownString(s_ref C.StringRef) string {
	return string(unsafe.Slice((*byte)(unsafe.Pointer(s_ref.ptr)), int(s_ref.len)))
}
func cntString(_ *string, _ *uint) [0]C.StringRef { return [0]C.StringRef{} }
func new_list_mapper[T1, T2 any](f func(T1) T2) func(C.ListRef) []T2 {
	return func(x C.ListRef) []T2 {
		input := unsafe.Slice((*T1)(unsafe.Pointer(x.ptr)), x.len)
		output := make([]T2, len(input))
		for i, v := range input {
			output[i] = f(v)
		}
		return output
	}
}
func new_list_mapper_primitive[T1, T2 any](_ func(T1) T2) func(C.ListRef) []T2 {
	return func(x C.ListRef) []T2 {
		return unsafe.Slice((*T2)(unsafe.Pointer(x.ptr)), x.len)
	}
}

// only handle non-primitive type T
func cnt_list_mapper[T, R any](f func(s *T, cnt *uint) [0]R) func(s *[]T, cnt *uint) [0]C.ListRef {
	return func(s *[]T, cnt *uint) [0]C.ListRef {
		for _, v := range *s {
			f(&v, cnt)
		}
		*cnt += uint(len(*s)) * size_of[R]()
		return [0]C.ListRef{}
	}
}

// only handle primitive type T
func cnt_list_mapper_primitive[T, R any](_ func(s *T, cnt *uint) [0]R) func(s *[]T, cnt *uint) [0]C.ListRef {
	return func(s *[]T, cnt *uint) [0]C.ListRef { return [0]C.ListRef{} }
}

// only handle non-primitive type T
func ref_list_mapper[T, R any](f func(s *T, buffer *[]byte) R) func(s *[]T, buffer *[]byte) C.ListRef {
	return func(s *[]T, buffer *[]byte) C.ListRef {
		if len(*buffer) == 0 {
			return C.ListRef{
				ptr: unsafe.Pointer(nil),
				len: C.uintptr_t(len(*s)),
			}
		}
		ret := C.ListRef{
			ptr: unsafe.Pointer(&(*buffer)[0]),
			len: C.uintptr_t(len(*s)),
		}
		children_bytes := int(size_of[R]()) * len(*s)
		children := (*buffer)[:children_bytes]
		*buffer = (*buffer)[children_bytes:]
		for _, v := range *s {
			child := f(&v, buffer)
			len := unsafe.Sizeof(child)
			copy(children, unsafe.Slice((*byte)(unsafe.Pointer(&child)), len))
			children = children[len:]
		}
		return ret
	}
}

// only handle primitive type T
func ref_list_mapper_primitive[T, R any](_ func(s *T, buffer *[]byte) R) func(s *[]T, buffer *[]byte) C.ListRef {
	return func(s *[]T, buffer *[]byte) C.ListRef {
		if len(*s) == 0 {
			return C.ListRef{
				ptr: unsafe.Pointer(nil),
				len: C.uintptr_t(0),
			}
		}
		return C.ListRef{
			ptr: unsafe.Pointer(&(*s)[0]),
			len: C.uintptr_t(len(*s)),
		}
	}
}
func size_of[T any]() uint {
	var t T
	return uint(unsafe.Sizeof(t))
}
func cvt_ref[R, CR any](cnt_f func(s *R, cnt *uint) [0]CR, ref_f func(p *R, buffer *[]byte) CR) func(p *R) (CR, []byte) {
	return func(p *R) (CR, []byte) {
		var cnt uint
		cnt_f(p, &cnt)
		buffer := make([]byte, cnt)
		return ref_f(p, &buffer), buffer
	}
}
func cvt_ref_cap[R, CR any](cnt_f func(s *R, cnt *uint) [0]CR, ref_f func(p *R, buffer *[]byte) CR, add_cap uint) func(p *R) (CR, []byte) {
	return func(p *R) (CR, []byte) {
		var cnt uint
		cnt_f(p, &cnt)
		buffer := make([]byte, cnt, cnt+add_cap)
		return ref_f(p, &buffer), buffer
	}
}

func newC_uint8_t(n C.uint8_t) uint8    { return uint8(n) }
func newC_uint16_t(n C.uint16_t) uint16 { return uint16(n) }
func newC_uint32_t(n C.uint32_t) uint32 { return uint32(n) }
func newC_uint64_t(n C.uint64_t) uint64 { return uint64(n) }
func newC_int8_t(n C.int8_t) int8       { return int8(n) }
func newC_int16_t(n C.int16_t) int16    { return int16(n) }
func newC_int32_t(n C.int32_t) int32    { return int32(n) }
func newC_int64_t(n C.int64_t) int64    { return int64(n) }
func newC_bool(n C.bool) bool           { return bool(n) }
func newC_uintptr_t(n C.uintptr_t) uint { return uint(n) }
func newC_intptr_t(n C.intptr_t) int    { return int(n) }
func newC_float(n C.float) float32      { return float32(n) }
func newC_double(n C.double) float64    { return float64(n) }

func cntC_uint8_t(_ *uint8, _ *uint) [0]C.uint8_t    { return [0]C.uint8_t{} }
func cntC_uint16_t(_ *uint16, _ *uint) [0]C.uint16_t { return [0]C.uint16_t{} }
func cntC_uint32_t(_ *uint32, _ *uint) [0]C.uint32_t { return [0]C.uint32_t{} }
func cntC_uint64_t(_ *uint64, _ *uint) [0]C.uint64_t { return [0]C.uint64_t{} }
func cntC_int8_t(_ *int8, _ *uint) [0]C.int8_t       { return [0]C.int8_t{} }
func cntC_int16_t(_ *int16, _ *uint) [0]C.int16_t    { return [0]C.int16_t{} }
func cntC_int32_t(_ *int32, _ *uint) [0]C.int32_t    { return [0]C.int32_t{} }
func cntC_int64_t(_ *int64, _ *uint) [0]C.int64_t    { return [0]C.int64_t{} }
func cntC_bool(_ *bool, _ *uint) [0]C.bool           { return [0]C.bool{} }
func cntC_uintptr_t(_ *uint, _ *uint) [0]C.uintptr_t { return [0]C.uintptr_t{} }
func cntC_intptr_t(_ *int, _ *uint) [0]C.intptr_t    { return [0]C.intptr_t{} }
func cntC_float(_ *float32, _ *uint) [0]C.float      { return [0]C.float{} }
func cntC_double(_ *float64, _ *uint) [0]C.double    { return [0]C.double{} }

func refC_uint8_t(p *uint8, _ *[]byte) C.uint8_t    { return C.uint8_t(*p) }
func refC_uint16_t(p *uint16, _ *[]byte) C.uint16_t { return C.uint16_t(*p) }
func refC_uint32_t(p *uint32, _ *[]byte) C.uint32_t { return C.uint32_t(*p) }
func refC_uint64_t(p *uint64, _ *[]byte) C.uint64_t { return C.uint64_t(*p) }
func refC_int8_t(p *int8, _ *[]byte) C.int8_t       { return C.int8_t(*p) }
func refC_int16_t(p *int16, _ *[]byte) C.int16_t    { return C.int16_t(*p) }
func refC_int32_t(p *int32, _ *[]byte) C.int32_t    { return C.int32_t(*p) }
func refC_int64_t(p *int64, _ *[]byte) C.int64_t    { return C.int64_t(*p) }
func refC_bool(p *bool, _ *[]byte) C.bool           { return C.bool(*p) }
func refC_uintptr_t(p *uint, _ *[]byte) C.uintptr_t { return C.uintptr_t(*p) }
func refC_intptr_t(p *int, _ *[]byte) C.intptr_t    { return C.intptr_t(*p) }
func refC_float(p *float32, _ *[]byte) C.float      { return C.float(*p) }
func refC_double(p *float64, _ *[]byte) C.double    { return C.double(*p) }

type CreateResponse struct {
	err    []string
	server Server
}

func newCreateResponse(p C.CreateResponseRef) CreateResponse {
	return CreateResponse{
		err:    new_list_mapper(newString)(p.err),
		server: newServer(p.server),
	}
}
func ownCreateResponse(p C.CreateResponseRef) CreateResponse {
	return CreateResponse{
		err:    new_list_mapper(ownString)(p.err),
		server: ownServer(p.server),
	}
}
func cntCreateResponse(s *CreateResponse, cnt *uint) [0]C.CreateResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.CreateResponseRef{}
}
func refCreateResponse(p *CreateResponse, buffer *[]byte) C.CreateResponseRef {
	return C.CreateResponseRef{
		err:    ref_list_mapper(refString)(&p.err, buffer),
		server: refServer(&p.server, buffer),
	}
}

type DestroyResponse struct {
	err []string
}

func newDestroyResponse(p C.DestroyResponseRef) DestroyResponse {
	return DestroyResponse{
		err: new_list_mapper(newString)(p.err),
	}
}
func ownDestroyResponse(p C.DestroyResponseRef) DestroyResponse {
	return DestroyResponse{
		err: new_list_mapper(ownString)(p.err),
	}
}
func cntDestroyResponse(s *DestroyResponse, cnt *uint) [0]C.DestroyResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.DestroyResponseRef{}
}
func refDestroyResponse(p *DestroyResponse, buffer *[]byte) C.DestroyResponseRef {
	return C.DestroyResponseRef{
		err: ref_list_mapper(refString)(&p.err, buffer),
	}
}

type Environment struct {
	crd_install_options    CRDInstallOptions
	binary_assets_settings BinaryAssetsSettings
}

func newEnvironment(p C.EnvironmentRef) Environment {
	return Environment{
		crd_install_options:    newCRDInstallOptions(p.crd_install_options),
		binary_assets_settings: newBinaryAssetsSettings(p.binary_assets_settings),
	}
}
func ownEnvironment(p C.EnvironmentRef) Environment {
	return Environment{
		crd_install_options:    ownCRDInstallOptions(p.crd_install_options),
		binary_assets_settings: ownBinaryAssetsSettings(p.binary_assets_settings),
	}
}
func cntEnvironment(s *Environment, cnt *uint) [0]C.EnvironmentRef {
	cntCRDInstallOptions(&s.crd_install_options, cnt)
	return [0]C.EnvironmentRef{}
}
func refEnvironment(p *Environment, buffer *[]byte) C.EnvironmentRef {
	return C.EnvironmentRef{
		crd_install_options:    refCRDInstallOptions(&p.crd_install_options, buffer),
		binary_assets_settings: refBinaryAssetsSettings(&p.binary_assets_settings, buffer),
	}
}

type BinaryAssetsSettings struct {
	download_binary_assets           bool
	download_binary_assets_version   string
	download_binary_assets_index_url string
	binary_assets_directory          string
}

func newBinaryAssetsSettings(p C.BinaryAssetsSettingsRef) BinaryAssetsSettings {
	return BinaryAssetsSettings{
		download_binary_assets:           newC_bool(p.download_binary_assets),
		download_binary_assets_version:   newString(p.download_binary_assets_version),
		download_binary_assets_index_url: newString(p.download_binary_assets_index_url),
		binary_assets_directory:          newString(p.binary_assets_directory),
	}
}
func ownBinaryAssetsSettings(p C.BinaryAssetsSettingsRef) BinaryAssetsSettings {
	return BinaryAssetsSettings{
		download_binary_assets:           newC_bool(p.download_binary_assets),
		download_binary_assets_version:   ownString(p.download_binary_assets_version),
		download_binary_assets_index_url: ownString(p.download_binary_assets_index_url),
		binary_assets_directory:          ownString(p.binary_assets_directory),
	}
}
func cntBinaryAssetsSettings(s *BinaryAssetsSettings, cnt *uint) [0]C.BinaryAssetsSettingsRef {
	_ = s
	_ = cnt
	return [0]C.BinaryAssetsSettingsRef{}
}
func refBinaryAssetsSettings(p *BinaryAssetsSettings, buffer *[]byte) C.BinaryAssetsSettingsRef {
	return C.BinaryAssetsSettingsRef{
		download_binary_assets:           refC_bool(&p.download_binary_assets, buffer),
		download_binary_assets_version:   refString(&p.download_binary_assets_version, buffer),
		download_binary_assets_index_url: refString(&p.download_binary_assets_index_url, buffer),
		binary_assets_directory:          refString(&p.binary_assets_directory, buffer),
	}
}

type CRDInstallOptions struct {
	paths                 []string
	crds                  []string
	error_if_path_missing bool
}

func newCRDInstallOptions(p C.CRDInstallOptionsRef) CRDInstallOptions {
	return CRDInstallOptions{
		paths:                 new_list_mapper(newString)(p.paths),
		crds:                  new_list_mapper(newString)(p.crds),
		error_if_path_missing: newC_bool(p.error_if_path_missing),
	}
}
func ownCRDInstallOptions(p C.CRDInstallOptionsRef) CRDInstallOptions {
	return CRDInstallOptions{
		paths:                 new_list_mapper(ownString)(p.paths),
		crds:                  new_list_mapper(ownString)(p.crds),
		error_if_path_missing: newC_bool(p.error_if_path_missing),
	}
}
func cntCRDInstallOptions(s *CRDInstallOptions, cnt *uint) [0]C.CRDInstallOptionsRef {
	cnt_list_mapper(cntString)(&s.paths, cnt)
	cnt_list_mapper(cntString)(&s.crds, cnt)
	return [0]C.CRDInstallOptionsRef{}
}
func refCRDInstallOptions(p *CRDInstallOptions, buffer *[]byte) C.CRDInstallOptionsRef {
	return C.CRDInstallOptionsRef{
		paths:                 ref_list_mapper(refString)(&p.paths, buffer),
		crds:                  ref_list_mapper(refString)(&p.crds, buffer),
		error_if_path_missing: refC_bool(&p.error_if_path_missing, buffer),
	}
}

type Server struct {
	kubeconfig string
}

func newServer(p C.ServerRef) Server {
	return Server{
		kubeconfig: newString(p.kubeconfig),
	}
}
func ownServer(p C.ServerRef) Server {
	return Server{
		kubeconfig: ownString(p.kubeconfig),
	}
}
func cntServer(s *Server, cnt *uint) [0]C.ServerRef {
	_ = s
	_ = cnt
	return [0]C.ServerRef{}
}
func refServer(p *Server, buffer *[]byte) C.ServerRef {
	return C.ServerRef{
		kubeconfig: refString(&p.kubeconfig, buffer),
	}
}
func main() {}
